#version 450

layout(
local_size_x = 1,
local_size_y = 1,
local_size_z = 1
) in;

struct Boid
{
    vec4 pos;
    vec4 vel;
};

struct Triangle {
    uint indices[3];
};

layout(std430, set = 0, binding = 0) buffer BoidsInput
{
    Boid boids[];
};

layout(std430, set = 0, binding = 1) buffer BoidsOutput
{
    Boid boids2[];
};

layout(std430, set = 1, binding = 0) buffer Instances
{
    mat4 instances[];
};

layout(std430, set = 1, binding = 1) buffer Indices
{
    Triangle indices[];
};

layout(std430, set = 1, binding = 2) buffer Vertices
{
    vec4 verticies[];
};

layout(std430, set = 1, binding = 3) buffer SamplePoints {
    vec4 samplePoints[];
};

layout(std140, set = 2, binding = 0) uniform Globals {
    uint triangle_count;
    uint sample_count;
    float delta;
};

#define eps 0.005

bool needs_evasion(Triangle tri, vec3 start, vec3 end) {
    vec3 v0 = verticies[tri.indices[0]].xyz;
    vec3 v1 = verticies[tri.indices[1]].xyz;
    vec3 v2 = verticies[tri.indices[2]].xyz;

    vec3 u = v1 - v0;
    vec3 v = v2 - v0;
    vec3 n = cross(u, v);// normal vector of the triangle

    // ignore degenereate triangles
    if (n == vec3(0)) {
        return false;
    }

    vec3 dir = end - start;// direction of line segment
    vec3 w0 = start-v0;
    float a = -dot(n, w0);
    float b = dot(n, dir);

    if (abs(b) < eps) { // triangle parallel to segment
        if (a == 0) {
            return true;// in the same plane better avoid
        } else {
            return false;// disjoint no need to act
        }
    }

    float r = a / b;
    if (r < 0.0 || r > 1.0) { // intersection of line with plane outside segment
        return false;
    }

    vec3 i = start + r * dir;// intersection point


    float uu = dot(u, u);
    float uv = dot(u, v);
    float vv = dot(v, v);
    vec3 w = i - v0;
    float wu = dot(w, u);
    float wv = dot(w, v);
    float d = uv * uv - uu * vv;

    float s = (uv * wv - vv * wu) / d;
    if (s < 0.0 || s > 1.0) {
        return false;
    }
    float t = (uv * wu - uu * wv) / d;
    if (t < 0.0 || (s+t) > 1.0) {
        return false;
    }

    return true;
}

void main() {
    uint gid = gl_GlobalInvocationID.x;
    vec3 pos = boids[gid].pos.xyz;
    vec3 vel = boids[gid].vel.xyz;

    boids2[gid].vel = boids[gid].vel;
    boids2[gid].vel.x = length(vel);

    float dist = 0.2;

    vec3 up = vec3(1.0f, 0.0f, 0.0f);
    vec3 xaxis = normalize(cross(up, vel));
    vec3 yaxis = normalize(cross(vel, xaxis));

    mat4 transform;
    {
        vec3 v = cross(vec3(1.0f, 0.0f, 0.0f), vel.xyz);
        vec3 u = v/length(v);
        float c = dot(vec3(1.0f, 0.0f, 0.0f), vel.xyz);
        float h = (1-c)/(1-c*c);
        transform = mat4(
        c+h*v.x*v.x, h*v.x*v.y+v.z, h*v.x*v.z-v.y, 0,
        h*v.x*v.y-v.z, c+h*v.y*v.y, h*v.y*v.z+v.x, 0,
        h*v.x*v.z+v.y, h*v.y*v.z-v.x, c+h*v.z*v.z, 0,
        0, 0, 0, 1
        );
    }


    //    for(uint i = 0; i < sample_count; i++) {
    //        vec3 start = pos;
    //        vec3 posSample = normalize(transform * samplePoints[i].xyz);
    //        vec3 end = start +  dist * posSample;
    //        bool no_evasion = true;
    //        for(uint j = 0; j < triangle_count; j++) {
    //            Triangle tri = indices[j];
    //            if(needs_evasion(tri, start, end)) {
    //                //boids2[gid].pos.x += 1;
    //                no_evasion = false;
    //                break;
    //            }
    //        }
    //        if(no_evasion) {
    //            if(abs(dot(normalize(vel), normalize(posSample))-1.0) > 0.05) {
    //                boids2[gid].pos.x += 1;
    //            }
    //            vel = length(vel) * posSample;
    //            //boids2[gid].pos.xyz = length(vel) * normalize(posSample);
    //            //boids2[gid].vel.xyz = posSample;
    //            break;
    //        }
    //    }
    for (uint i = 0; i < triangle_count; i++) {
        vec3 start = pos;
        vec3 end = pos + dist * normalize(vel);
        if (needs_evasion(indices[i], start, end)) {
            vel *= -1;
            break;
        }
    }
    pos += vel*delta;
    boids2[gid].pos.xyz = pos;
    boids2[gid].vel.xyz = vel;

    {
        vec3 v = cross(vec3(1.0f, 0.0f, 0.0f), vel.xyz);
        vec3 u = v/length(v);
        float c = dot(vec3(1.0f, 0.0f, 0.0f), vel.xyz);
        float h = (1-c)/(1-c*c);
        transform = mat4(
            c+h*v.x*v.x, h*v.x*v.y+v.z, h*v.x*v.z-v.y, 0,
            h*v.x*v.y-v.z, c+h*v.y*v.y, h*v.y*v.z+v.x, 0,
            h*v.x*v.z+v.y, h*v.y*v.z-v.x, c+h*v.z*v.z, 0,
            0, 0, 0, 1
        );
        instances[gid][0] = transform[0];
        instances[gid][1] = transform[1];
        instances[gid][2] = transform[2];
        instances[gid][3] = transform[3];
    }
}
